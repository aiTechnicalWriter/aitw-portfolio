{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":""},{"location":"index.html#welcome-to-the-qbank-docs-as-code-portfolio","title":"Welcome to the QBank Docs-as-Code Portfolio","text":"<p>This site showcases elements of a documentation system built for QBank \u2014 a fictional financial platform designed to demonstrate best practices in technical writing and developer experience.</p> <p>Explore how we use: - MkDocs + Macros for scalable reuse - Modular Includes for maintainable, multi-domain documentation - OpenAPI + Swagger UI for interactive API reference</p> <p>Whether you're a developer, designer, or documentation strategist, this portfolio offers a blueprint for building clear, maintainable, and user-centered docs.</p>"},{"location":"api-docs/endpoint-overview.html","title":"Endpoint Overview","text":""},{"location":"api-docs/endpoint-overview.html#positive-pay-endpoint-overview","title":"Positive Pay Endpoint Overview","text":"<p>Positive Pay is a fraud-prevention service that allows account holders to share outgoing check details with their bank, so the bank can verify each check before clearing it. When an ERP Software Partner integrates their platform with the Positive Pay Endpoints in QBank Connect API (QAPI), they can provide positive pay service to their users, giving them automated, real-time control over their check verification workflows.</p>"},{"location":"api-docs/endpoint-overview.html#related-systems","title":"Related Systems","text":"<p>The Positive Pay Endpoints interact with the following systems:</p> <ul> <li> <p>ERP Software Partner Platform - SaaS software for Enterprise Resource Planning, provided by a vendor who has entered a software partnership agreement with QBank, to gain access to QBank Connect API endpoints.</p> </li> <li> <p>Fiserv CoreAdvance - QBank\u2019s core banking platform.</p> </li> <li> <p>mETL Hub - QBank\u2019s custom ETL and automation engine. The Positive Pay Endpoints rely on two automated mETL Hub jobs:</p> <ul> <li> <p>QAPI Process Positive Pay - Extracts records from the Positive Pay Database, generates the Fiserv Positive Pay Loader file, and places the file into a Fiserv SFTP location.</p> </li> <li> <p>QAPI Import Fiserv Data - Imports the Fiserv Extract file to update QAPI databases.</p> </li> </ul> </li> </ul>"},{"location":"api-docs/endpoint-overview.html#use-cases","title":"Use Cases","text":"<p>The Positive Pay Endpoints support the following use cases:</p> <ul> <li> <p>Adding a Positive Pay</p> </li> <li> <p>Canceling a Positive Pay</p> </li> <li> <p>Updating Positive Pay Data</p> </li> <li> <p>Listing Positive Pays</p> </li> <li> <p>Finding Positive Pays Using a Filter</p> </li> <li> <p>Getting an Individual Positive Pay</p> </li> </ul>"},{"location":"api-docs/endpoint-overview.html#adding-a-positive-pay","title":"Adding a Positive Pay","text":"<p>Platform Users can add Positive Pay service to an outgoing check.</p> <p></p> <p>Click to Enlarge</p> <p>When a Partner Platform User requests Positive Pay service for a check:</p> <ol> <li> <p>The Partner Platform calls the PositivePay/Add endpoint with a POST request that contains the check information. </p> </li> <li> <p>The endpoint adds a record to the Positive Pay database and returns a confirmation reply to the Platform.</p> </li> <li> <p>Every 15 minutes an automated mETL Hub job (QAPI Process Positive Pay) downloads any new Positive Pay records, generates a Positive Pay file, and moves the file to a Fiserv SFTP Location.</p> </li> <li> <p>Fiserv processes the request.</p> </li> </ol>"},{"location":"api-docs/endpoint-overview.html#canceling-a-positive-pay","title":"Canceling a Positive Pay","text":"<p>Platform Users can cancel a Positive Pay request.</p> <p></p> <p>Click to Enlarge</p> <p>When a Platform User requests to cancel a Positive Pay request:</p> <ol> <li> <p>The Platform calls the PositivePay/Add endpoint with a POST request that contains a VOID entry with the relevant check's information. </p> </li> <li> <p>The endpoint adds a VOID record to the Positive Pay database and returns a confirmation reply to the Platform.</p> </li> <li> <p>Every 15 minutes an automated mETL Hub job (QAPI Process Positive Pay) downloads any new Positive Pay records, generates a Positive Pay file, and moves the file to a Fiserv SFTP Location.</p> </li> <li> <p>Fiserv processes the VOID request, canceling the Positive Pay request for the relevant check.</p> </li> </ol>"},{"location":"api-docs/endpoint-overview.html#updating-positive-pay-data","title":"Updating Positive Pay Data","text":"<p>The Positive Pay Database is updated every 24 hours in QBank's Nightly Process. </p> <p></p> <p>Click to Enlarge</p> <p>In the night after each business day, at 1:00 am, an automated mETL Hub job (QAPI Import Fiserv Data) imports the day's data from Fiserv and updates the QAPI databases.</p> <p>This includes all records of Fiserv's Positive Pay processing. </p> <p>Once the Positive Pay Database is updated, Platform Users have visibility to their Positive Pay activity from the previous day.</p>"},{"location":"api-docs/endpoint-overview.html#listing-positive-pays","title":"Listing Positive Pays","text":"<p>Platform Users can get a list of Positive Pay records from the previous day.</p> <p></p> <p>Click to Enlarge</p> <p>When a User requests a list of Positive Pay records:</p> <ol> <li> <p>The Platform calls the PositivePay/List endpoint with a GET request.</p> </li> <li> <p>The endpoint retrieves the records from the previous day and returns the list to the Platform.</p> </li> </ol>"},{"location":"api-docs/endpoint-overview.html#finding-positive-pays-using-a-filter","title":"Finding Positive Pays Using a Filter","text":"<p>Platform Users can use a filter to find Positive Pay records that match specified parameters.</p> <p></p> <p>Click to Enlarge</p> <p>When a User requests records that match a set of parameters, such as a Date, Date Range, or Account #:</p> <ol> <li> <p>The Platform calls the PositivePay/Find endpoint with a POST request that contains the parameters.</p> </li> <li> <p>The endpoint retrieves the matching records and returns them to the Platform.</p> </li> </ol>"},{"location":"api-docs/endpoint-overview.html#getting-an-individual-positive-pay","title":"Getting an Individual Positive Pay","text":"<p>Platform Users can retrieve individual Positive Pay records.</p> <p></p> <p>Click to Enlarge</p> <p>When a User requests a record with a specific PositivePay ID #:</p> <ol> <li> <p>The Platform calls the PositivePay/ID/{ID} endpoint with a GET request that contains the ID #.</p> </li> <li> <p>The endpoint retrieves the specified record and returns it to the Platform.</p> </li> </ol>"},{"location":"api-docs/endpoint-overview.html#related-documents","title":"Related Documents","text":"<p>Related Custom Applications:</p> <ul> <li> <p>QBank Connect API</p> </li> <li> <p>mETL Hub (Automation Engine)</p> </li> </ul> <p>Related ETL Jobs:</p> <ul> <li> <p>QAPI Process Positive Pay</p> </li> <li> <p>QAPI Import Fiserv Data</p> </li> </ul> <p>Related Third-Party Applications &amp; Integrations:</p> <ul> <li> <p>Fiserv CoreAdvance</p> </li> <li> <p>Fiserv Positive Pay Loader</p> </li> <li> <p>Fiserv Extract</p> </li> </ul> <p>Related Business Units:</p> <ul> <li>TM (Treasury Management)</li> </ul>"},{"location":"api-docs/explanation-conceptual-guide.html","title":"API Conceptual Guide","text":""},{"location":"api-docs/explanation-conceptual-guide.html#qbank-connect-api-guide","title":"QBank Connect API Guide","text":"<p>This guide introduces the core concepts behind the QBank Connect API design, including authentication, data formats, rate limits, and error handling. It\u2019s intended for developers integrating with our platform and technical writers documenting API behavior.</p>"},{"location":"api-docs/explanation-conceptual-guide.html#overview","title":"Overview","text":"<p>QBank API is designed to be RESTful, secure, and scalable. It exposes endpoints for core platform operations, supports JSON payloads, and uses standard HTTP verbs.</p> <p>Base URL: <code>https://api.qbank.com/v1/</code> Versioning: All endpoints are versioned to ensure backward compatibility. Security: Authentication is required for all endpoints using bearer tokens. Rate Limits: Requests are throttled to prevent abuse and ensure stability.</p> <p>This guide introduces key concepts to help you integrate confidently and document effectively.</p>"},{"location":"api-docs/explanation-conceptual-guide.html#authentication","title":"Authentication","text":"<p>QBank Connect API uses token-based authentication. Developers must first create an account and obtain credentials, which are exchanged for a bearer token via the <code>/auth/token</code> endpoint. Tokens expire after 30 minutes and must be refreshed.</p>"},{"location":"api-docs/explanation-conceptual-guide.html#data-formats","title":"Data Formats","text":"<p>All requests and responses use JSON. Field names follow camelCase conventions. Dates are formatted as ISO 8601 strings. Binary payloads (e.g., images or documents) must be base64-encoded.</p>"},{"location":"api-docs/explanation-conceptual-guide.html#rate-limiting","title":"Rate Limiting","text":"<p>To ensure fair usage, the API enforces rate limits per account. Standard accounts are limited to 100 requests per minute. Exceeding this threshold returns a <code>429 Too Many Requests</code> error with a <code>Retry-After</code> header.</p>"},{"location":"api-docs/explanation-conceptual-guide.html#error-handling","title":"Error Handling","text":"<p>Errors follow a consistent structure:</p> <pre><code>{\n  \"error\": {\n    \"code\": \"INVALID_FIELD\",\n    \"message\": \"The 'amount' field must be a positive number.\"\n  }\n}\n</code></pre>"},{"location":"api-docs/explanation-conceptual-guide.html#best-practices","title":"Best Practices","text":"<ul> <li>Use exponential backoff when retrying failed requests</li> <li>Always validate input before sending API calls</li> <li>Log both request and response payloads for auditability</li> <li>Avoid hardcoding tokens \u2014 use secure storage and refresh logic</li> </ul> <p>Need help? Visit the Developer Quickstart for a step-by-step walkthrough or check the API Reference for endpoint details.</p>"},{"location":"api-docs/howto-developer-quickstart.html","title":"Developer Quickstart","text":""},{"location":"api-docs/howto-developer-quickstart.html#developer-quickstart","title":"Developer Quickstart","text":"<p>Follow this walkthrough to integrate with the QBank Connect API in minutes. </p>"},{"location":"api-docs/howto-developer-quickstart.html#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you meet the following requirements:</p> <p>To follow this guide, you\u2019ll need:</p> <ul> <li>A terminal or command prompt</li> <li>cURL installed</li> <li>A valid Qbank API Key</li> </ul> <p>If you don\u2019t have an API key, refer to the API Conceptual Guide for instructions.</p>"},{"location":"api-docs/howto-developer-quickstart.html#step-1-create-an-account","title":"Step 1: Create an Account","text":"<p>To access the API, you need a developer account.</p>"},{"location":"api-docs/howto-developer-quickstart.html#step-2-retrieve-account-id","title":"Step 2: Retrieve Account ID","text":"<p>Use a sample CIF (Customer Information File) number to look up a customer\u2019s account:</p> <pre><code>curl -X GET \"https://api.qbank.com/v2/accounts/{accountId}\" \\\n  -H \"Authorization: Bearer $QBANK_API_KEY\"\n</code></pre> <p>Expected response: JSON object with <code>accountId</code>, <code>accountType</code>, and <code>balance</code>.  </p>"},{"location":"api-docs/howto-developer-quickstart.html#step-2-authenticate","title":"Step 2: Authenticate","text":"<p>Use your credentials to authenticate and receive a token.</p>"},{"location":"api-docs/howto-developer-quickstart.html#step-1-authenticate-with-your-api-key","title":"Step 1: Authenticate with Your API Key","text":"<p>Save your API key to a shell variable for reuse:</p> <pre><code>export QBANK_API_KEY=\"qb-1a2b3c4d...\"\n</code></pre> <p>Your API key will be a long string of letters and numbers. Expected response: A JSON object confirming authentication and showing your <code>accountId</code>.  </p>"},{"location":"api-docs/howto-developer-quickstart.html#step-3-make-a-transaction-call","title":"Step 3: Make a Transaction Call","text":"<p>Once authenticated, you can initiate a transaction.</p>"},{"location":"api-docs/howto-developer-quickstart.html#step-3-retrieve-transaction-history","title":"Step 3: Retrieve Transaction History","text":"<p>Now that you have the <code>accountId</code>, fetch recent transactions:</p> <pre><code>curl -X GET \"https://api.qbank.com/v2/accounts/{accountId}/transactions?limit=5\" \\\n  -H \"Authorization: Bearer $QBANK_API_KEY\"\n</code></pre> <p>Expected response: JSON array of transactions with <code>amount</code>, <code>description</code>, and <code>timestamp</code>.  </p>"},{"location":"api-docs/howto-developer-quickstart.html#success-confirmation","title":"Success Confirmation","text":"<p>If everything is set up correctly, you should receive a success response.</p>"},{"location":"api-docs/howto-developer-quickstart.html#you-did-it","title":"You Did It!","text":"<p>You\u2019ve successfully made your first two calls to the Qbank Connect API:</p> <ul> <li>Retrieved account details</li> <li>Fetched transaction history</li> </ul> <p>You\u2019re now ready to explore additional endpoints, build integrations, and scale your solution.</p> <p>Need help? Visit the Conceptual Guide for deeper context or check the API Reference for endpoint details.</p>"},{"location":"api-docs/reference-api.html","title":"API Reference","text":""},{"location":"api-docs/reference-api.html#qbank-api-reference","title":"QBank API Reference","text":""},{"location":"architecture/c4-model.html","title":"C4 Model","text":"<p>Architectural Overview: The Qbank System (C4 Model) This document provides a conceptual overview of the Qbank software architecture using the C4 model. The C4 model is a visual and structured approach to documenting software architecture that simplifies complex systems into a clear, hierarchical set of diagrams. This approach makes the architecture accessible to both technical and non-technical stakeholders by allowing them to \"zoom in\" to different levels of detail as needed. \u00a0 </p> <p>The Four Levels of the C4 Model The C4 model is based on four core levels of abstraction: Context, Container, Component, and Code. Each level provides a different view of the system, tailored to a specific audience and purpose. \u00a0 </p> <p>Level 1: System Context Diagram A System Context diagram provides a high-level, \"bird's eye view\" of the system. \u00a0 </p> <p>Purpose: To show how the system fits into its environment and how it interacts with external entities. It helps stakeholders understand the overall scope of the project and the problem it solves. \u00a0 </p> <p>Audience: Intended for anyone who needs a general understanding of the system, including both technical and non-technical audiences like business stakeholders, product managers, and developers. \u00a0 </p> <p>Scope: Focuses on the system as a single entity, its users (Person), and other systems it interacts with (System). The internal details of the system are not shown at this level. \u00a0 </p> <p>&lt;&gt;</p> <p>Level 2: Container Diagram A Container diagram zooms into a single system to reveal its main, independently deployable and runnable parts. \u00a0 </p> <p>Purpose: To show how the system is deployed and how its major parts communicate. It provides a more technical view for architects and developers. \u00a0 </p> <p>Audience: Primarily for technical audiences such as architects and developers, as it includes details on technology choices and communication protocols.</p> <p>Scope: The scope includes the users, external systems, and the containers that make up the system being diagrammed. It explicitly notes technologies used (e.g.,  \u00a0 </p> <p>Java, Kubernetes, JSON/HTTPS). \u00a0 </p> <p>&lt;&gt;</p> <p>Level 3: Component Diagram A Component diagram provides a detailed view of a single container, breaking it down into its internal software components.</p> <p>Purpose: To illustrate the structural building blocks within a container, their responsibilities, and their interactions. It is especially useful for developers working on specific parts of the system. \u00a0 </p> <p>Audience: Geared toward a low-level technical audience, specifically architects and developers. \u00a0 </p> <p>Scope: The scope includes users, external systems, containers, and the components within the container being detailed. This is where the documentation would show the  \u00a0 </p> <p>LegacyAdapter component translating modern API requests into the legacy system's format.</p> <p>&lt;&gt;</p> <p>Level 4: Code Diagram A Code diagram is the lowest level of abstraction in the C4 model, focusing on the implementation details of a single component. \u00a0 </p> <p>Purpose: To detail the internal structure of a component, often using a UML class diagram, and how it is implemented in code. This level is typically auto-generated from the source code. \u00a0 </p> <p>Audience: This is a very technical view, intended for a low-level audience of architects and developers who need to understand the codebase. \u00a0 </p> <p>Scope: The scope includes users, systems, containers, and the specific components and classes being documented. It is the level least frequently used due to its high level of detail. \u00a0 </p> <p>&lt;&gt;</p> <p>I have now provided the full content for the Architectural Overview, organized in a way that is ready for DITA XML authoring. Please let me know when you are ready for the next document.</p> <p>===</p>"},{"location":"architecture/c4-model.html#alt-text","title":"ALT TEXT","text":"<p>Architectural Overview: The Qbank System (C4 Model) This document provides a visual overview of the Qbank software ecosystem using the C4 model. This model helps us to describe a complex system at different levels of abstraction, making the architecture accessible to both technical and non-technical audiences.</p> <p>Level 1: System Context Diagram The System Context diagram is a high-level view that shows the Qbank ecosystem as a single system and how it interacts with its users and external systems. It answers the question, \"How does the system fit into its environment?\".</p> <p>&lt;&gt;</p> <p>Level 2: Container Diagram The Container diagram zooms into the system to show the main, high-level building blocks or containers. This view is intended for a technical audience, as it shows how the system is deployed and the technologies used for communication.</p> <p>&lt;&gt;</p> <p>Level 3: Component Diagram The Component diagram is a more detailed view that zooms into a single container to show the software components within it. This level is for a low-level technical audience, primarily architects and developers. It breaks down the structural building blocks of a container, detailing each component's responsibilities and how it interacts with other components. For our fictional system, we will use the </p> <p>Customer Profile Microservice as the container to document.</p> <p>This diagram would show the internal components of the microservice, such as:</p> <p>AuthModule: A component responsible for validating the incoming API key.</p> <p>CustomerDataController: Handles the business logic for retrieving and updating customer data.</p> <p>LegacyAdapter: A critical component that translates modern API requests into a format the Legacy Mainframe System can understand, demonstrating the system's need to bridge old and new technologies.</p> <p>&lt;&gt;</p> <p>Level 4: Code Diagram The Code diagram represents the lowest level of abstraction in the C4 model, focusing on the implementation details of a single component. This level is typically represented by UML class diagrams and is often auto-generated directly from the source code. Because of its high level of detail, it is the level that is least frequently used.</p> <p>For our portfolio, we would create a Code diagram that zooms into a specific component from Level 3, such as the LegacyAdapter. This diagram would show the major classes, interfaces, and their relationships, providing an in-depth view of how the component is implemented and how it interacts with the legacy system's protocol. This would demonstrate an understanding of code-level documentation and the ability to work closely with engineering teams on implementation details.</p> <p>&lt;&gt;</p> <p>===</p>"},{"location":"architecture/c4-model.html#alt-text_1","title":"ALT TEXT","text":"<p>LoanSphere Platform Architecture This document provides a high-level architectural overview of the LoanSphere platform using the C4 model for visualizing software architecture. It is intended for software developers, architects, and technical project managers at Qbank.</p> <p>Level 1: System Context The System Context diagram shows how the LoanSphere Platform fits into the broader Qbank IT ecosystem. It shows the key systems it interacts with and the user groups who use it.</p> <p>&lt;&lt;INSERT DIAGRAM HERE: A C4 System Context diagram. It should show a central box for the \"LoanSphere Platform\". Arrows should connect it to the following:</p> <p>A \"Loan Officer\" (Persona) using the system.</p> <p>The \"Qbank NexusGateway API\" (System), which LoanSphere calls to get customer data and push loan decisions.</p> <p>The \"Qbank CoreConnect Mainframe\" (System), showing a dotted-line relationship via the NexusGateway.</p> <p>An \"Email Service\" (System) for sending notifications to customers.</p> <p>A \"Credit Bureau API\" (External System) for pulling credit reports.&gt;&gt;</p> <p>Key Interactions: Loan Officers use the LoanSphere Platform to manage the entire loan application and approval workflow.</p> <p>The platform fetches customer account and history data from the NexusGateway API, which acts as a facade for both modern services and the legacy CoreConnect Mainframe.</p> <p>It calls external Credit Bureau APIs to pull applicant credit scores and history.</p> <p>It uses an internal Email Service to send status updates to customers.</p> <p>Approved loan data is pushed back through the NexusGateway API to update the customer's profile in the core banking systems.</p> <p>Level 2: Containers The Container diagram zooms into the LoanSphere Platform itself, showing the high-level technical building blocks (the \"containers\" in C4 terminology).</p> <p>&lt;&lt;INSERT DIAGRAM HERE: A C4 Container diagram. It should have a boundary labeled \"LoanSphere Platform\". Inside the boundary, show the following containers (boxes):</p> <p>Single-Page Application (SPA): (Technology: React) The user interface running in the Loan Officer's browser.</p> <p>Loan Workflow Service: (Technology: Java/Spring Boot) A REST API that manages the business logic of the loan application lifecycle.</p> <p>Document Management Service: (Technology: Python/Django) A REST API responsible for uploading and storing applicant documents (e.g., pay stubs).</p> <p>Database: (Technology: PostgreSQL) Stores all data related to loan applications, statuses, and user actions.</p> <p>File Storage: (Technology: AWS S3) Blob storage for the actual document files.</p> <p>Show arrows indicating the primary interactions:</p> <p>The SPA communicates with the Loan Workflow Service and the Document Management Service.</p> <p>The Loan Workflow Service reads/writes to the Database and calls the Document Management Service.</p> <p>The Document Management Service reads/writes to the Database and stores files in the File Storage.</p> <p>Both services make outbound calls to the external systems defined in the Level 1 diagram (NexusGateway, Credit Bureau, etc.).&gt;&gt;</p> <p>Container Descriptions: Single-Page Application (SPA): A React-based frontend that provides the user interface for Loan Officers. It is a pure client-side application that communicates with the backend services via REST APIs.</p> <p>Loan Workflow Service: The core of the platform. This Java-based microservice contains the business logic for processing loan applications, managing state transitions (e.g., 'submitted' -&gt; 'under review' -&gt; 'approved'), and orchestrating calls to other services.</p> <p>Document Management Service: A dedicated Python microservice for handling file uploads. This isolates the concerns of file processing and storage, allowing it to be scaled independently.</p> <p>Database: A relational PostgreSQL database that serves as the single source of truth for all loan application data.</p> <p>File Storage: Uses AWS S3 for durable, secure storage of sensitive customer documents, separating large binary files from the primary database.</p> <p>This container-based architecture allows for independent development, deployment, and scaling of the different components of the LoanSphere platform.</p>"},{"location":"includes/api/overview.html","title":"Overview","text":"<p>QBank API is designed to be RESTful, secure, and scalable. It exposes endpoints for core platform operations, supports JSON payloads, and uses standard HTTP verbs.</p> <p>Base URL: <code>https://api.qbank.com/v1/</code> Versioning: All endpoints are versioned to ensure backward compatibility. Security: Authentication is required for all endpoints using bearer tokens. Rate Limits: Requests are throttled to prevent abuse and ensure stability.</p> <p>This guide introduces key concepts to help you integrate confidently and document effectively.</p>"},{"location":"includes/api/quickstart-prerequisites.html","title":"Quickstart prerequisites","text":"<p>To follow this guide, you\u2019ll need:</p> <ul> <li>A terminal or command prompt</li> <li>cURL installed</li> <li>A valid Qbank API Key</li> </ul> <p>If you don\u2019t have an API key, refer to the API Conceptual Guide for instructions.</p>"},{"location":"includes/api/quickstart-step-account.html","title":"Quickstart step account","text":""},{"location":"includes/api/quickstart-step-account.html#step-2-retrieve-account-id","title":"Step 2: Retrieve Account ID","text":"<p>Use a sample CIF (Customer Information File) number to look up a customer\u2019s account:</p> <pre><code>curl -X GET \"https://api.qbank.com/v2/accounts/{accountId}\" \\\n  -H \"Authorization: Bearer $QBANK_API_KEY\"\n</code></pre> <p>Expected response: JSON object with <code>accountId</code>, <code>accountType</code>, and <code>balance</code>.  </p>"},{"location":"includes/api/quickstart-step-auth.html","title":"Quickstart step auth","text":""},{"location":"includes/api/quickstart-step-auth.html#step-1-authenticate-with-your-api-key","title":"Step 1: Authenticate with Your API Key","text":"<p>Save your API key to a shell variable for reuse:</p> <pre><code>export QBANK_API_KEY=\"qb-1a2b3c4d...\"\n</code></pre> <p>Your API key will be a long string of letters and numbers. Expected response: A JSON object confirming authentication and showing your <code>accountId</code>.  </p>"},{"location":"includes/api/quickstart-step-transactions.html","title":"Quickstart step transactions","text":""},{"location":"includes/api/quickstart-step-transactions.html#step-3-retrieve-transaction-history","title":"Step 3: Retrieve Transaction History","text":"<p>Now that you have the <code>accountId</code>, fetch recent transactions:</p> <pre><code>curl -X GET \"https://api.qbank.com/v2/accounts/{accountId}/transactions?limit=5\" \\\n  -H \"Authorization: Bearer $QBANK_API_KEY\"\n</code></pre> <p>Expected response: JSON array of transactions with <code>amount</code>, <code>description</code>, and <code>timestamp</code>.  </p>"},{"location":"includes/api/quickstart-success.html","title":"Quickstart success","text":""},{"location":"includes/api/quickstart-success.html#you-did-it","title":"You Did It!","text":"<p>You\u2019ve successfully made your first two calls to the Qbank Connect API:</p> <ul> <li>Retrieved account details</li> <li>Fetched transaction history</li> </ul> <p>You\u2019re now ready to explore additional endpoints, build integrations, and scale your solution.</p>"},{"location":"includes/style-guide/error-do-dont.html","title":"Error Messaging Do & Don\u2019t Table","text":""},{"location":"includes/style-guide/error-do-dont.html#do-dont-table","title":"Do &amp; Don\u2019t Table","text":"<p>Use this table to reinforce best practices and flag common pitfalls in error messaging.</p> \u2705 Do \ud83d\udeab Don\u2019t \u201cUpload failed. File exceeds 10MB.\u201d \u201cError code 413.\u201d \u201cEnter a valid email address.\u201d \u201cInvalid input.\u201d \u201cYou don\u2019t have permission.\u201d \u201cAccess forbidden.\u201d \u201cTry again later.\u201d \u201cSomething went wrong.\u201d"},{"location":"includes/style-guide/error-do-dont.html#notes","title":"Notes","text":"<ul> <li>Favor plain language over technical codes.</li> <li>Be specific about the problem and resolution.</li> <li>Avoid vague or generic phrasing that frustrates users.</li> </ul>"},{"location":"includes/style-guide/error-localization-accessibility.html","title":"Localization & Accessibility Guidelines for Error Messaging","text":""},{"location":"includes/style-guide/error-localization-accessibility.html#localization-accessibility","title":"Localization &amp; Accessibility","text":"<p>Design error messages to be inclusive, translatable, and accessible to all users.</p>"},{"location":"includes/style-guide/error-localization-accessibility.html#localization-tips","title":"Localization Tips","text":"<ul> <li>Use plain language that can be easily translated.</li> <li>Avoid idioms, cultural references, or humor that may not localize well.</li> <li>Keep sentence structure simple and consistent.</li> </ul>"},{"location":"includes/style-guide/error-localization-accessibility.html#accessibility-tips","title":"Accessibility Tips","text":"<ul> <li>Ensure screen readers can access error messages.</li> <li>Use semantic HTML elements (e.g., <code>aria-live</code>, <code>role=\"alert\"</code>).</li> <li>Don\u2019t rely on color alone to convey meaning\u2014use icons, text, or patterns.</li> <li>Place error messages near the relevant input field or action.</li> </ul>"},{"location":"includes/style-guide/error-localization-accessibility.html#example","title":"Example","text":"<pre><code>&lt;div role=\"alert\" aria-live=\"assertive\"&gt;\n  Upload failed. The file exceeds the 10MB limit.\n&lt;/div&gt;\n</code></pre>"},{"location":"includes/style-guide/error-patterns-auth.html","title":"Authentication & Authorization Error Patterns","text":""},{"location":"includes/style-guide/error-patterns-auth.html#authentication-authorization-error-patterns","title":"Authentication &amp; Authorization Error Patterns","text":"<p>Use these patterns when users encounter login issues or access restrictions. Keep messages secure and user-friendly.</p> <pre><code>Access denied. You don\u2019t have permission to view this page.\n</code></pre> <pre><code>Session expired. Please sign in again.\n</code></pre> <pre><code>Invalid credentials. Please check your username and password.\n</code></pre>"},{"location":"includes/style-guide/error-patterns-auth.html#best-practices","title":"Best Practices","text":"<ul> <li>Avoid exposing internal roles, permissions, or security details.</li> <li>Offer next steps when possible (e.g., \u201cContact your administrator\u201d).</li> <li>Don\u2019t reveal whether a username or password is correct\u2014keep responses generic to prevent enumeration.</li> </ul>"},{"location":"includes/style-guide/error-patterns-connectivity.html","title":"Connectivity Error Patterns","text":""},{"location":"includes/style-guide/error-patterns-connectivity.html#connectivity-error-patterns","title":"Connectivity Error Patterns","text":"<p>Use these patterns when users experience network or server interruptions. Focus on recovery and reassurance.</p> <pre><code>Connection lost. Please check your internet and try again.\n</code></pre> <pre><code>Server timeout. Try again later or contact support if the issue persists.\n</code></pre> <pre><code>Unable to reach the server. Working offline until connection is restored.\n</code></pre>"},{"location":"includes/style-guide/error-patterns-connectivity.html#best-practices","title":"Best Practices","text":"<ul> <li>Avoid blaming the user or their device.</li> <li>Suggest retry actions or fallback options.</li> <li>Keep messages short and non-technical.</li> </ul>"},{"location":"includes/style-guide/error-patterns-reuse-strategy.html","title":"Error patterns reuse strategy","text":""},{"location":"includes/style-guide/error-patterns-reuse-strategy.html#error-messaging-reuse-strategy","title":"Error Messaging Reuse Strategy","text":"<p>Modular error messages improve consistency, reduce duplication, and simplify localization. Use shared patterns and terminology across platforms and contexts.</p> <ul> <li>Centralize reusable fragments in the <code>includes</code> folder for common error types (e.g., validation, connectivity).</li> <li>Reference terminology from <code>ui-terminology.md</code> to align with platform standards.</li> <li>Avoid hardcoding platform-specific details unless necessary; use conditional phrasing when reuse is intended.</li> <li>Document rationale for reuse decisions in the style guide to support onboarding and governance.</li> </ul> <p>Example: Instead of writing \u201cYour mobile app session expired,\u201d use \u201cYour session expired\u201d and let the UI context clarify the platform.</p>"},{"location":"includes/style-guide/error-patterns-system.html","title":"System Failure Error Patterns","text":""},{"location":"includes/style-guide/error-patterns-system.html#system-failure-error-patterns","title":"System Failure Error Patterns","text":"<p>Use these patterns when something breaks unexpectedly and no specific cause is available. Keep messages calm and constructive.</p> <pre><code>Something went wrong. Please refresh the page or try again later.\n</code></pre> <pre><code>Unexpected error occurred. We\u2019re working to fix it.\n</code></pre> <pre><code>The operation couldn\u2019t be completed. Try again in a few minutes.\n</code></pre>"},{"location":"includes/style-guide/error-patterns-system.html#best-practices","title":"Best Practices","text":"<ul> <li>Use generic fallback messages only when no actionable detail is available.</li> <li>Avoid technical codes unless the audience is developers.</li> <li>Consider logging the error for internal diagnostics and support follow-up.</li> </ul>"},{"location":"includes/style-guide/error-patterns-validation.html","title":"Validation Error Patterns","text":""},{"location":"includes/style-guide/error-patterns-validation.html#validation-error-patterns","title":"Validation Error Patterns","text":"<p>Use these patterns when guiding users to correct input errors. Keep messages close to the field and avoid technical jargon.</p> <pre><code>[Field name] is required. Please enter a value.\n</code></pre> <pre><code>Enter a valid email address.\n</code></pre> <pre><code>Password must be at least 8 characters.\n</code></pre>"},{"location":"includes/style-guide/error-patterns-validation.html#best-practices","title":"Best Practices","text":"<ul> <li>Be specific about what\u2019s wrong and how to fix it.</li> <li>Avoid vague phrases like \u201cInvalid input.\u201d</li> <li>Use plain language and field-specific feedback.</li> </ul>"},{"location":"includes/style-guide/error-platform-notes.html","title":"Error platform notes","text":""},{"location":"includes/style-guide/error-platform-notes.html#platform-specific-error-messaging-notes","title":"Platform-Specific Error Messaging Notes","text":"<p>While reuse is ideal, some error messages must be tailored to the platform\u2019s interaction model and user expectations.</p> <ul> <li>Web UI: Prioritize clarity and brevity. Inline errors should be scannable and avoid technical jargon.</li> <li>Mobile: Use concise language and avoid multi-step instructions. Consider limited screen space and touch interaction.</li> <li>CLI: Provide detailed context and actionable steps. Include error codes and log references when appropriate.</li> <li>API: Structure messages for machine readability. Include status codes, error types, and resolution hints in the response body.</li> </ul> <p>Tip: When customizing for a platform, retain core terminology and structure to preserve consistency across surfaces.</p>"},{"location":"includes/style-guide/error-principles.html","title":"Principles of Effective Error Messaging","text":""},{"location":"includes/style-guide/error-principles.html#principles-of-effective-error-messaging","title":"Principles of Effective Error Messaging","text":"<ul> <li>Clarity: State what went wrong in plain language.</li> <li>Actionability: Tell the user what to do next.</li> <li>Empathy: Avoid blame; focus on resolution.</li> <li>Consistency: Use standardized terminology and formatting.</li> </ul>"},{"location":"includes/style-guide/ui-terminology-examples.html","title":"UI Terminology Examples","text":""},{"location":"includes/style-guide/ui-terminology-examples.html#examples","title":"Examples","text":"<p>Use these examples to reinforce preferred terminology in context.</p> <pre><code>Click **Save** to apply your changes.\nSelect a value from the **Status** dropdown.\nEnter your email address in the **Email** field.\nTap **Submit** to continue.\nType your password and press **Enter**.\n</code></pre>"},{"location":"includes/style-guide/ui-terminology-examples.html#notes","title":"Notes","text":"<ul> <li>Bold UI labels to match interface text.</li> <li>Use consistent verbs across similar actions.</li> <li>Match terminology to platform (e.g., \u201cTap\u201d for mobile, \u201cClick\u201d for web).</li> </ul>"},{"location":"includes/style-guide/ui-terminology-platform-notes.html","title":"Platform-Specific UI Terminology Notes","text":""},{"location":"includes/style-guide/ui-terminology-platform-notes.html#platform-specific-notes","title":"Platform-Specific Notes","text":"<p>Adjust terminology based on the user\u2019s environment to match platform conventions and expectations.</p>"},{"location":"includes/style-guide/ui-terminology-platform-notes.html#web","title":"Web","text":"<ul> <li>Use Click for buttons and links.</li> <li>Use Select for dropdowns and radio buttons.</li> </ul>"},{"location":"includes/style-guide/ui-terminology-platform-notes.html#mobile","title":"Mobile","text":"<ul> <li>Use Tap instead of Click.</li> <li>Use Swipe, Pinch, or Drag for gestures.</li> </ul>"},{"location":"includes/style-guide/ui-terminology-platform-notes.html#cli-command-line-interface","title":"CLI (Command Line Interface)","text":"<ul> <li>Use Type or Run for commands.</li> <li>Avoid UI metaphors like \u201cClick\u201d or \u201cSelect.\u201d</li> </ul>"},{"location":"includes/style-guide/ui-terminology-platform-notes.html#desktop-apps","title":"Desktop Apps","text":"<ul> <li>Use Click, Double-click, and Right-click as needed.</li> <li>Match terminology to OS conventions (e.g., \u201cPreferences\u201d vs \u201cSettings\u201d).</li> </ul>"},{"location":"includes/style-guide/ui-terminology-platform-notes.html#notes","title":"Notes","text":"<ul> <li>Be consistent within each platform.</li> <li>Avoid mixing metaphors (e.g., \u201cTap the Save button\u201d in a desktop app).</li> </ul>"},{"location":"includes/style-guide/ui-terminology-principles.html","title":"UI Terminology Principles","text":""},{"location":"includes/style-guide/ui-terminology-principles.html#principles-of-ui-terminology","title":"Principles of UI Terminology","text":"<ul> <li>Clarity: Use terms that match user expectations.</li> <li>Consistency: Use the same term for the same element across screens and docs.</li> <li>Contextual Fit: Match terminology to platform conventions (web, mobile, CLI).</li> </ul>"},{"location":"includes/style-guide/ui-terminology-reuse-strategy.html","title":"UI Terminology Reuse Strategy","text":""},{"location":"includes/style-guide/ui-terminology-reuse-strategy.html#reuse-strategy","title":"Reuse Strategy","text":"<p>Use these guidelines to modularize and reuse UI terminology across documentation and interface copy.</p> <ul> <li>Includes: Break terminology into platform-specific includes for web, mobile, CLI, and desktop.</li> <li>Glossary Integration: Link key terms to glossary entries for deeper context and definitions.</li> <li>Cross-Topic Consistency: Reuse terminology in error messages, onboarding flows, and help content.</li> <li>Component-Level Reuse: Apply consistent phrasing in UI components like buttons, dialogs, and tooltips.</li> <li>Review Workflow: Establish a review process to catch inconsistencies before publishing.</li> </ul>"},{"location":"includes/style-guide/ui-terminology-reuse-strategy.html#example","title":"Example","text":"<pre><code>!include \"includes/ui-terminology-standard-terms.md\"\n</code></pre> <p>This ensures consistent phrasing across multiple topics without duplication.</p>"},{"location":"includes/style-guide/ui-terminology-standard-terms.html","title":"Standard UI Terminology","text":""},{"location":"includes/style-guide/ui-terminology-standard-terms.html#standard-terms","title":"Standard Terms","text":"<p>Use these preferred terms to describe common UI elements consistently across documentation and interface copy.</p> Element Type Preferred Term Avoid Button Click Press, Hit, Tap (unless mobile) Link Select Click here, Tap here Input Field Enter Type, Fill in Dropdown Choose Pick, Select from list Checkbox Check / Uncheck Tick, Untick, Mark Radio Button Select Choose, Pick Modal/Dialog Dialog Pop-up, Window Tab Tab Section, Page"},{"location":"includes/style-guide/ui-terminology-standard-terms.html#notes","title":"Notes","text":"<ul> <li>Use bold formatting for UI labels when referencing them in text.</li> <li>Avoid mixed metaphors or inconsistent verbs across platforms.</li> </ul>"},{"location":"includes/user-guide/transaction-comment-format.html","title":"Transaction comment format","text":"<p>Add a note in the \"Comments\" field. For a transaction correction, use the format: <code>CORRECTION: &lt;reason for correction&gt;</code></p>"},{"location":"includes/user-guide/transaction-correction-steps.html","title":"Transaction correction steps","text":"<ol> <li> <p>Locate the customer's account using a customer lookup.</p> </li> <li> <p>Navigate to the Transactions tab.</p> </li> <li> <p>Click the + New Transaction button.</p> </li> <li> <p>In the pop-up window, select the transaction type Manual Credit.</p> </li> <li> <p>Enter the correct amount.</p> </li> </ol> <ol> <li>Click Submit. The corrected transaction will appear in the transaction list with a \"Pending\" status.</li> </ol>"},{"location":"strategy/documentation-roadmap.html","title":"Documentation Roadmap","text":"<p>Documentation Strategy Document: The Qbank Connect Roadmap A senior professional does not just write; they think strategically about documentation. This document will be a high-level plan that aligns documentation goals with business objectives [user query]. It will begin with a problem statement: the challenge of integrating new applications with a decade-old legacy system. It will then define the target audiences (e.g., \"New-Hire Developer,\" \"Product Manager,\" \"Legacy Engineer\") and set clear, measurable documentation goals. For example, a goal might be to \"Reduce new developer onboarding time by 50%\" or \"Deflect 25% of support tickets related to API authentication issues.\" The document will conclude with a multi-phase roadmap for creating the documentation, showing which documents will be prioritized and why.</p> <p>Style Guide Excerpt: For the Qbank Application Team This short, focused excerpt from a larger style guide demonstrates the ability to establish and enforce standards for quality and consistency across a team [user query]. It will define a consistent voice (Authoritative but approachable) and tone (Helpful, clear, professional), and include a small dictionary of key terms specific to the Qbank ecosystem (e.g., CIF, Legacy Mainframe, API Endpoint). The excerpt will also lay out formatting rules for elements like code blocks, file paths, and UI elements.</p> <p>Proof of Efficacy: Metrics and User Research Artifacts This is the most critical section for demonstrating a senior writer's business acumen and value. It provides a case study that shows how documentation can drive measurable business results.</p> <p>The scenario for this case study is that the Qbank Connect API documentation was recently re-written, and this document presents the \"before\" and \"after\" metrics to prove its efficacy. This moves beyond a simple, qualitative assertion of quality to a quantitative, data-backed proof of value. The case study will highlight a reduction in support tickets related to common problems, increased dwell time on a critical \"How-To\" guide, and a decrease in certain search terms, all of which suggest that the documentation is more effective and easier to navigate. The analysis will also present a fictional but realistic metric: a reduction in the time it takes new developers to make a successful API call.</p> <p>The following table visually consolidates this data, providing a powerful, scannable narrative of success that transforms abstract numbers into a tangible demonstration of business impact.</p> <p>The case study will also include a brief, formal document showing a Documentation Testing Plan. This demonstrates a proactive, quality-focused mindset. It will outline a plan for both automated and manual validation, including the use of a CI/CD pipeline (e.g., GitHub Actions) to check for broken links and validate code examples. It also mentions a process for manual user review with internal stakeholders to ensure accuracy and clarity.</p> <p>AI as a Force Multiplier: A Practical Framework In the modern landscape, a senior technical writer must not only be aware of AI but also be an expert in leveraging it effectively. The core principle is that AI is a tool, not a replacement. Its value lies in augmenting human intelligence, not in supplanting it. This is the </p> <p>human-in-the-loop model , which is a central philosophy of this portfolio.</p> <p>AI's ability to automate content generation, drafting, and summarization frees up the technical writer's time to focus on higher-value tasks, such as information architecture, audience analysis, and strategic content planning. The modern technical writer's job is not just writing, but thinking and curating. For example, a senior writer would not use AI to generate a full set of release notes without supervision. Instead, they would use an AI tool to rapidly generate a first draft based on a pull request's changelog. The human writer would then apply strategic thinking, audience empathy, and detailed editing to transform that draft into a high-quality, impactful document that communicates the value of the new features.</p> <p>The following table categorizes AI applications by function and explains their specific value to a senior technical writer in a structured, professional format.</p> <p>Function    Tools   Strategic Use Case  Human-in-the-Loop Role Content Generation &amp; Drafting   ChatGPT, Bard, Claude, Hix AI  Use to rapidly prototype first drafts of basic documents or to generate multiple outlines for a single topic. Accelerates the initial \"blank page\" phase.</p> <p>Curation, fact-checking, tone adjustment, and ensuring adherence to a pre-defined style guide. Summarization &amp; Explanation QuillBot, Perplexity AI, ChatGPT   Use to condense complex research papers or meeting notes into a concise memo. Valuable for creating executive summaries and high-level overviews.</p> <p>Validation of key points, identification of any lost nuance, and application of a specific audience-centric narrative. Editing &amp; Style Checks  Grammarly, DeepL Write, Reverso  Automate grammar, spelling, and basic style consistency checks. Can provide feedback on tone and readability.</p> <p>Critical review of suggestions, application of domain-specific jargon where appropriate, and maintaining a human voice. Knowledge &amp; Content Gaps    ClickHelp's Answer Genius  Analyze user questions and search queries to identify gaps in existing documentation. Suggests content updates or additions.</p> <p>Analyze the root cause of user confusion and develop a strategic plan to address knowledge gaps, which may involve new documentation. Translation &amp; Localization  DeepL, Reverso Translate technical content into other languages while preserving technical terminology and contextual meaning.</p> <p>Review and validate machine translations, especially for industry-specific jargon and legal terms, to ensure accuracy for a global audience.</p> <p>===</p>"},{"location":"strategy/documentation-roadmap.html#alternate-text","title":"ALTERNATE TEXT","text":"<p>Qbank Connect Documentation Strategy Concept: Strategic Alignment for the Qbank Connect API The Qbank Connect API's purpose is to allow new applications to interact with Qbank's core legacy systems. This strategy document provides a high-level plan that aligns documentation goals with core business objectives. It addresses the central challenge of integrating new applications with a complex, decade-old legacy system.</p> <p>Problem Statement: The Qbank application development team is tasked with building new software that must integrate with a complex ecosystem of both modern microservices and a decade-old mainframe system. The current documentation is fragmented, outdated, and does not provide a clear, unified view of the system. This leads to slow new-developer onboarding, increased support tickets, and miscommunication between teams.</p> <p>Target Audiences:</p> <p>New-Hire Developer: A developer with a background in modern web services who needs to quickly learn the Qbank ecosystem. Their primary goal is to make their first successful API call.</p> <p>Product Manager: A non-technical stakeholder who needs a high-level understanding of the system's architecture to scope new projects.</p> <p>Legacy Engineer: A veteran engineer who is deeply familiar with the legacy systems but needs to understand how the new API will interact with them.</p> <p>Documentation Goals: Our documentation strategy is designed to achieve the following, measurable objectives:</p> <p>Reduce Onboarding Time: Decrease the time it takes for a new developer to make their first successful API call by 50%. \u00a0 </p> <p>Deflect Support Tickets: Reduce the number of support tickets related to API authentication issues and transaction errors by 25%. \u00a0 </p> <p>Roadmap: A multi-phase plan for creating the documentation, showing which documents will be prioritized and why.</p> <p>Phase 1: Foundations (Month 1-2): Prioritize the API Reference and a Developer Quickstart guide. These documents address the most urgent pain points for the primary audience (the New-Hire Developer) and provide immediate value. \u00a0 </p> <p>Phase 2: Context &amp; Clarity (Month 3-4): Create the Architectural Overview using the C4 model to give all audiences a clear mental model of the system. Develop the Conceptual Guide to provide deeper context for the API.</p> <p>Phase 3: Efficacy &amp; Expansion (Month 5+): Conduct user research, analyze metrics, and document the findings in a case study. Begin creating documentation for other applications and systems within the Qbank ecosystem.</p> <p>Reference: Qbank Application Style Guide Excerpt This document provides a concise excerpt from a larger style guide, demonstrating the ability to establish and enforce standards for quality and consistency across a team.</p> <p>Voice &amp; Tone: Our documentation voice should be authoritative but approachable. The tone is professional, direct, and helpful.</p> <p>Do: Use active voice. \"You must provide an API key.\"</p> <p>Do not: Use passive voice. \"An API key must be provided.\"</p> <p>Do: Use \"you\" to address the user directly. \"You will see a successful response.\"</p> <p>Do not: Refer to the user in the third person. \"The user will see a successful response.\"</p> <p>Terminology: Use the following terms consistently throughout the documentation.</p> <p>Term    Definition CIF Customer Information File. A unique, 7-digit number assigned to every customer. Endpoint    The specific URL where an API call is made. Legacy Mainframe    The core banking system, a large, decades-old application that manages all customer data and transactions.</p> <p>Export to Sheets Formatting:</p> <p>Code Blocks: Use triple backticks with a language specifier (e.g., bash, json).</p> <p>File Paths: Enclose file paths in backticks. For example, src/main.go.</p> <p>UI Elements: Use bold text for UI elements. For example, click Submit.</p> <p>Concept and Task: Proof of Efficacy and Documentation Testing This is a case study that demonstrates a senior writer's business acumen by providing data-backed proof of value. It also includes a plan for ensuring documentation quality over time.</p> <p>Metrics Case Study: The Qbank Connect API documentation was recently re-written, and this document presents the \"before\" and \"after\" metrics to prove its efficacy. This moves beyond a simple, qualitative assertion of quality to a quantitative, data-backed proof of value. The case study highlights a reduction in support tickets, increased dwell time on key guides, and a decrease in certain search terms, all of which suggest that the documentation is more effective and easier to navigate. The analysis also presents a fictional but realistic metric: a reduction in the time it takes new developers to make a successful API call [user query]. \u00a0 </p> <p>Metric  Before  After   Change  Business Impact Support Tickets Deflected   12 per week 3 per week  75% Reduced support costs and increased developer productivity. Time-to-First-Call  25 minutes  8 minutes   68% Faster developer onboarding and time-to-market. Average Dwell Time (Quickstart Guide)   1.5 minutes 5.2 minutes +247%   Users are finding the solution and completing the task in the documentation. \"Authentication Error\" Search Volume    35 searches/week    5 searches/week -86%    Improved findability; users are not encountering or are able to solve a common problem.</p> <p>Export to Sheets Documentation Testing Plan: To ensure the continued accuracy of the documentation, we have implemented a testing plan that integrates into our standard CI/CD workflow.</p> <p>Automated Validation: A GitHub Actions workflow runs on every pull request to check for broken links and validate the syntax of all code blocks. This automated process catches common errors before they are published, maintaining the documentation's integrity. \u00a0 </p> <p>Manual Review: All new and updated documentation is subject to a manual review by a subject matter expert and a representative from the target audience. This ensures the content is not only accurate but also clear, complete, and easy to understand from a user's perspective.</p> <p>I have now provided the full content for the Documentation Strategy document, organized in a way that is ready for DITA XML authoring. Please let me know when you are ready for the next document.</p> <p>===</p>"},{"location":"strategy/documentation-roadmap.html#more-alt-text","title":"MORE ALT TEXT","text":""},{"location":"strategy/documentation-roadmap.html#qbank-connect-documentation-strategy-document","title":"Qbank Connect Documentation Strategy Document","text":"<ol> <li> <p>Problem Statement The Qbank application development team is tasked with building new applications that must integrate with a complex ecosystem of both modern microservices and a decade-old mainframe system. The current documentation is fragmented, outdated, and does not provide a clear, unified view of the system. This leads to slow new-developer onboarding, increased support tickets, and miscommunication between teams.</p> </li> <li> <p>Target Audience &amp; Personas New-Hire Developer: A developer with a background in modern web services who needs to quickly learn the Qbank ecosystem. Their primary goal is to make their first successful API call.</p> </li> </ol> <p>Product Manager: A non-technical stakeholder who needs a high-level understanding of the system's architecture to scope new projects.</p> <p>Legacy Engineer: A veteran engineer who is deeply familiar with the legacy systems but needs to understand how the new API will interact with them.</p> <ol> <li>Documentation Goals &amp; Metrics Our documentation strategy is designed to achieve the following, measurable objectives:</li> </ol> <p>Reduce Onboarding Time: Decrease the time it takes for a new developer to make their first successful API call by 50%.</p> <p>Deflect Support Tickets: Reduce the number of support tickets related to API authentication issues and transaction errors by 25%.</p> <p>Improve Developer Confidence: Increase the \"Did this documentation help?\" positive feedback rating on key pages to 85%.</p> <ol> <li>Roadmap Phase 1: Foundations (Month 1-2): Prioritize the API Reference and a Developer Quickstart guide. These documents address the most urgent pain points for the primary audience (the New-Hire Developer) and provide immediate value.</li> </ol> <p>Phase 2: Context &amp; Clarity (Month 3-4): Create the Architectural Overview using the C4 model to give all audiences a clear mental model of the system. Develop the Conceptual Guide to provide deeper context for the API.</p> <p>Phase 3: Efficacy &amp; Expansion (Month 5+): Conduct user research, analyze metrics, and document the findings in a case study. Begin creating documentation for other applications and systems within the Qbank ecosystem.</p>"},{"location":"strategy/documentation-roadmap.html#style-guide-integration","title":"Style Guide Integration","text":"<p>To support consistency and modular reuse, the documentation roadmap is aligned with the Style Guide Overview.</p> <ul> <li>All content types follow structural templates defined in the style guide.</li> <li>Terminology and voice guidelines ensure cross-platform clarity.</li> <li>Error messaging patterns are centralized for reuse across UI, API, and CLI docs.</li> <li>Contributors are encouraged to use <code>!include</code> syntax for shared fragments.</li> </ul> <p>See the full Style Guide for principles, patterns, and reusable components.</p>"},{"location":"strategy/metrics-case-study.html","title":"Metrics Case Study","text":""},{"location":"strategy/metrics-case-study.html#qbank-connect-api-documentation-metrics-case-study","title":"Qbank Connect API Documentation Metrics Case Study","text":"<p>This case study presents the measurable business impact of the recently published Qbank Connect API documentation. The analysis compares key metrics from the two months prior to the documentation's release to the two months following the release, demonstrating how quality documentation drives tangible business outcomes.</p>"},{"location":"strategy/metrics-case-study.html#support-ticket-deflection","title":"Support Ticket Deflection","text":"<p>A primary goal of the new documentation was to reduce the volume of support tickets related to API usage, particularly for common issues like authentication failures. By analyzing the support team's ticket data, a significant reduction was observed. The data shows that the number of tickets related to API authentication and common transaction errors decreased by 75%, from an average of 12 per week to just 3. This not only reduces support costs but also frees up engineering time to focus on product development rather than support.</p>"},{"location":"strategy/metrics-case-study.html#time-to-first-call","title":"Time-to-First-Call","text":"<p>This metric, which tracks how long it takes a new developer to make a successful API call, is a key indicator of the documentation's effectiveness for developer onboarding. Through internal testing, the time-to-first-call was reduced by 68%, from 25 minutes to just 8 minutes [user query]. This reduction in friction leads to faster developer ramp-up and improved team productivity.</p>"},{"location":"strategy/metrics-case-study.html#search-and-engagement-analytics","title":"Search and Engagement Analytics","text":"<p>Analytics data from the documentation portal provides a clear picture of user behavior. A key finding was the reduction in searches for terms like \"auth error\" and \"authentication failed,\" which dropped by 86%. This indicates that the new Quickstart Guide and Conceptual Guide successfully addressed a major pain point, making the solution easier to find and understand. Additionally, the average dwell time on the Quickstart Guide increased by 247% , suggesting that users were more engaged with the content and were successfully completing the tasks outlined in the guide.</p>"},{"location":"strategy/style-guide-excerpt.html","title":"Qbank Application Documentation Style Guide (Excerpt)","text":""},{"location":"strategy/style-guide-excerpt.html#qbank-application-documentation-style-guide-excerpt","title":"Qbank Application Documentation Style Guide (Excerpt)","text":"<p>This document provides standards for creating clear, consistent, and helpful documentation for Qbank products.</p>"},{"location":"strategy/style-guide-excerpt.html#voice-and-tone","title":"Voice and Tone","text":"<p>Our voice is who we are; our tone is how we express it in different situations.</p>"},{"location":"strategy/style-guide-excerpt.html#our-voice","title":"Our Voice","text":"<p>Our documentation voice is confident, knowledgeable, and approachable. We are experts in our field, but we are not arrogant. We write with clarity and precision, reflecting the trust our customers place in us.</p>"},{"location":"strategy/style-guide-excerpt.html#use-active-voice","title":"Use active voice","text":"<p>Good: \"You must provide an API key.\" Bad: \"An API key must be provided.\"</p>"},{"location":"strategy/style-guide-excerpt.html#address-the-user-as-you","title":"Address the user as \"you\"","text":"<p>Good: \"You will see a successful response.\" Bad: \"The user will see a successful response.\"</p>"},{"location":"strategy/style-guide-excerpt.html#our-tone","title":"Our Tone","text":"<p>Our documentation tone is professional, direct, and helpful. The tone adapts to the context of different document types:</p>"},{"location":"strategy/style-guide-excerpt.html#tutorials-and-how-to-guides","title":"Tutorials and how-to guides","text":"<p>Be encouraging and straightforward. Guide them through the process as a helpful partner. For example:</p> <p>\"You can get your API keys from the developer portal.\"</p>"},{"location":"strategy/style-guide-excerpt.html#reference-and-architectural-documents","title":"Reference and architectural documents","text":"<p>Be more formal and descriptive. Focus on accuracy and objective explanation. For example:</p> <p>\"The service authenticates requests using a bearer token.\"</p>"},{"location":"strategy/style-guide-excerpt.html#troubleshooting-guides","title":"Troubleshooting guides","text":"<p>Be empathetic and solution-oriented. Acknowledge the user's frustration and guide them directly to a solution. Avoid blaming the user.</p> <p>Good: \"Couldn't connect to the database. Check if the database is running and the connection string is correct.\" Bad: \"You entered the wrong database credentials.\"</p>"},{"location":"strategy/style-guide-excerpt.html#error-messages","title":"Error Messages","text":"<p>Every error message should answer three questions: - What happened? (The problem) - Why did it happen? (The cause) - What can I do about it? (The solution)</p> <p>For example:</p> <p>Error: Unable to Save Changes Cause: Your session has expired due to inactivity. Solution: Please log in again to continue editing. Unsaved changes may be lost if not recovered promptly.</p>"},{"location":"strategy/style-guide-excerpt.html#api-error-responses","title":"API Error Responses","text":"<p>Document all NexusGateway API errors in the OpenAPI specification, using a standardized Error schema. For example:</p> <p>Message:  Authentication token is missing or invalid.  Cause: The request was made without a valid Authorization header containing a bearer token, or the provided token has expired or is malformed.  Solution: Ensure you are including the Authorization: Bearer  header in your request. If the token has expired, request a new one from the /oauth/token endpoint. Verify that you are copying the entire token string.</p>"},{"location":"style-guide/index.html","title":"Style Guide Overview","text":""},{"location":"style-guide/index.html#style-guide-overview","title":"Style Guide Overview","text":"<p>This section defines standards and reusable components for writing clear, consistent, and user-friendly documentation across platforms.</p>"},{"location":"style-guide/index.html#purpose","title":"Purpose","text":"<p>The style guide helps unify voice, terminology, and structure across UI, API, CLI, and support content. It supports modular reuse and onboarding for writers and developers.</p>"},{"location":"style-guide/index.html#structure","title":"Structure","text":"<p>The guide is organized into modular topics and includes:</p> <ul> <li>Voice &amp; Tone Guidelines: Define personality, empathy, and clarity.</li> <li>UI Terminology Standards: Shared terms and naming conventions.</li> <li>Error Messaging Guidelines: Principles, patterns, and platform notes.</li> <li>Code &amp; Syntax Guide: Formatting and language-specific conventions.</li> <li>Content Types: Structural templates for tutorials, references, and how-tos.</li> <li>Includes folder: Reusable fragments for error patterns, terminology, and principles.</li> </ul> <p>Tip: Use <code>!include</code> syntax to embed reusable fragments and reduce duplication.</p>"},{"location":"style-guide/index.html#navigation","title":"Navigation","text":"<p>Explore individual topics using the sidebar or jump directly to Error Messaging Guidelines.</p>"},{"location":"style-guide/best-practices.html","title":"Best practices","text":""},{"location":"style-guide/best-practices.html#best-practices","title":"Best Practices","text":"<p>Follow these guidelines to ensure clarity, consistency, and professionalism in all code-related documentation:</p> <p>\u2705 General Rules:</p> <ul> <li>Keep code examples short and focused.  </li> <li>Use comments in code to explain logic when necessary.  </li> <li>Avoid wrapping code in quotation marks\u2014use backticks instead.  </li> <li>Ensure all code is tested and accurate before publishing.  </li> <li>Use consistent indentation and spacing in all code samples.</li> </ul> <p>\ud83d\udca1 Tip: When documenting complex workflows, break them into smaller, reusable code blocks and explain each step clearly. This improves readability and supports modular reuse.</p>"},{"location":"style-guide/code-blocks.html","title":"Code blocks","text":""},{"location":"style-guide/code-blocks.html#code-blocks","title":"Code Blocks","text":"<p>Use fenced code blocks with triple backticks (<code>```</code>) to display multi-line code. Always specify the language for syntax highlighting.</p> <pre><code>```python\ndef calculate_balance(transactions):\n    return sum(transactions)\n```\n</code></pre> <p>This renders as:</p> <pre><code>def calculate_balance(transactions):\n    return sum(transactions)\n</code></pre> <p>\u2705 Best Practice: Always test code snippets before publishing to ensure accuracy.</p>"},{"location":"style-guide/code-syntax-guide.html","title":"Code &amp; Syntax Guide","text":""},{"location":"style-guide/code-syntax-guide.html#code-syntax-guide","title":"Code &amp; Syntax Guide","text":"<p>This guide defines how code, commands, file paths, and syntax-related content should be presented in QBank documentation. Each section below links to a modular topic file, authored using structured authoring principles.</p>"},{"location":"style-guide/code-syntax-guide.html#topics","title":"Topics","text":"<ul> <li>Code Blocks</li> <li>Inline Code</li> <li>File Paths</li> <li>Command Line Instructions</li> <li>Indentation &amp; Formatting</li> <li>Showing Markdown Syntax</li> <li>Best Practices</li> <li>MkDocs Styling Tips</li> <li>Voice &amp; Tone Guidelines</li> <li>Error Messaging Guidelines</li> <li>UI Terminology Standards</li> </ul>"},{"location":"style-guide/command-line.html","title":"Command line","text":""},{"location":"style-guide/command-line.html#command-line-instructions","title":"Command Line Instructions","text":"<p>Use fenced code blocks with triple backticks to display terminal commands. Always specify the language as <code>bash</code> for shell commands to enable syntax highlighting.</p> <p>\u2705 Example:</p> <pre><code>mkdocs gh-deploy --force\n</code></pre> <p>\ud83d\udca1 Tips:</p> <ul> <li>Do not include shell prompts like <code>$</code> or <code>PS&gt;</code> unless needed for clarity.  </li> <li>Keep commands short and focused. If multiple steps are required, use numbered lists or separate blocks.  </li> <li>Use comments sparingly to explain logic or flags, especially in scripts.</li> </ul> <p>\ud83e\udde0 Best Practice: Always test commands before publishing to ensure they work as expected in the target environment.</p>"},{"location":"style-guide/content-types.html","title":"Content Types","text":""},{"location":"style-guide/content-types.html#content-types","title":"Content Types","text":"<p>Define and standardize the primary content types used across documentation. Each type includes purpose, structure, and reuse guidance.</p>"},{"location":"style-guide/content-types.html#overview","title":"Overview","text":"<p>This guide outlines common content types used in our documentation system, helping authors choose the right format for the right purpose.</p>"},{"location":"style-guide/content-types.html#task-topics","title":"Task Topics","text":"<ul> <li>Purpose: Step-by-step instructions for completing a specific action.</li> <li>Structure: Use numbered lists, imperative voice, and clear prerequisites.</li> <li>Reuse: Ideal for UI walkthroughs, API usage, and troubleshooting.</li> </ul>"},{"location":"style-guide/content-types.html#concept-topics","title":"Concept Topics","text":"<ul> <li>Purpose: Explain ideas, workflows, or background information.</li> <li>Structure: Use headings, diagrams, and examples to clarify.</li> <li>Reuse: Link from task topics or onboarding guides.</li> </ul>"},{"location":"style-guide/content-types.html#reference-topics","title":"Reference Topics","text":"<ul> <li>Purpose: Provide structured data, parameters, or configuration details.</li> <li>Structure: Use tables, bullet lists, and consistent formatting.</li> <li>Reuse: API docs, CLI commands, configuration files.</li> </ul>"},{"location":"style-guide/content-types.html#troubleshooting-topics","title":"Troubleshooting Topics","text":"<ul> <li>Purpose: Help users resolve known issues.</li> <li>Structure: Problem \u2192 Cause \u2192 Solution format.</li> <li>Reuse: Link from error messages or support docs.</li> </ul>"},{"location":"style-guide/content-types.html#glossary-entries","title":"Glossary Entries","text":"<ul> <li>Purpose: Define terms and acronyms.</li> <li>Structure: Term \u2192 Definition \u2192 Optional example.</li> <li>Reuse: Link inline or from UI Terminology.</li> </ul>"},{"location":"style-guide/content-types.html#embedded-content","title":"Embedded Content","text":"<ul> <li>Purpose: Reusable snippets, warnings, or notes.</li> <li>Structure: Use callouts, reusable includes, or markdown fragments.</li> <li>Reuse: Across multiple topics via transclusion or includes.</li> </ul>"},{"location":"style-guide/content-types.html#authoring-tips","title":"Authoring Tips","text":"<ul> <li>Choose a Task Topic when the user needs to do something.</li> <li>Use a Concept Topic when the user needs to understand something.</li> <li>Link Reference Topics from tasks to support decision-making.</li> <li>Convert long tasks into Concept + Task pairs if clarity suffers.</li> <li>Use Embedded Content for reusable warnings, notes, or callouts.</li> </ul>"},{"location":"style-guide/error-messaging.html","title":"Error Messaging Guidelines","text":""},{"location":"style-guide/error-messaging.html#error-messaging-guidelines","title":"Error Messaging Guidelines","text":"<p>Clear, actionable error messages help users recover quickly and build trust in the product. This guide defines best practices for writing effective error messages across UI, API, and CLI contexts.</p>"},{"location":"style-guide/error-messaging.html#what-is-an-error-message","title":"What Is an Error Message?","text":"<p>An error message communicates that something has gone wrong and guides the user toward resolution. It may appear in a dialog, toast, inline field, or log output.</p>"},{"location":"style-guide/error-messaging.html#principles-of-effective-error-messaging","title":"Principles of Effective Error Messaging","text":"<p>!include \"includes/error-principles.md\"</p>"},{"location":"style-guide/error-messaging.html#structure-template","title":"Structure Template","text":"<pre><code>[What happened] + [Why it happened] + [What to do next]\n\n### Example\nUpload failed. The file exceeds the 10MB limit. Please compress the file or choose a smaller one.\n</code></pre>"},{"location":"style-guide/error-messaging.html#common-patterns","title":"Common Patterns","text":"<p>!include \"includes/error-patterns-validation.md\" !include \"includes/error-patterns-auth.md\" !include \"includes/error-patterns-connectivity.md\" !include \"includes/error-patterns-upload.md\" !include \"includes/error-patterns-system.md\"</p>"},{"location":"style-guide/error-messaging.html#localization-accessibility","title":"Localization &amp; Accessibility","text":"<p>!include \"includes/error-localization-accessibility.md\"</p>"},{"location":"style-guide/error-messaging.html#do-dont-table","title":"Do &amp; Don\u2019t Table","text":"<p>!include \"includes/error-do-dont.md\"</p>"},{"location":"style-guide/error-messaging.html#reuse-strategy-platform-notes","title":"Reuse Strategy &amp; Platform Notes","text":"<p>To ensure consistency across platforms and reduce duplication, reuse modular error messaging components wherever possible. Reference shared terminology, patterns, and principles from the includes folder.</p> <p>!include \"includes/error-patterns-reuse-strategy.md\" !include \"includes/error-platform-notes.md\"</p>"},{"location":"style-guide/file-paths.html","title":"File paths","text":""},{"location":"style-guide/file-paths.html#file-paths","title":"File Paths","text":"<p>Always enclose file paths in backticks to distinguish them from surrounding text. This improves readability and ensures that paths are treated as literal values.</p> <p>\u2705 Examples:</p> <ul> <li>Configuration is stored in <code>C:\\QBank\\Config\\settings.yml</code>.  </li> <li>Markdown files are located in <code>docs/user-guide/</code>.  </li> <li>To update the homepage, edit <code>docs/index.md</code>.</li> </ul> <p>\ud83d\udca1 Tip: Avoid using quotation marks or italics for file paths. Backticks preserve formatting and prevent ambiguity.</p>"},{"location":"style-guide/indentation-formatting.html","title":"Indentation formatting","text":""},{"location":"style-guide/indentation-formatting.html#indentation-formatting","title":"Indentation &amp; Formatting","text":"<p>Markdown ignores leading spaces in regular paragraphs. To simulate indentation or control spacing, use HTML elements or non-breaking spaces.</p> <p>\u2705 Techniques:</p> <ul> <li>Use <code>&amp;nbsp;</code> (non-breaking space) for manual indentation.  </li> <li>Use inline HTML for styled indentation when semantic spacing is needed.</li> </ul> <p>\u2705 Example:</p> <pre><code>&lt;p style=\"text-indent: 2em;\"&gt;This paragraph is indented using HTML styling.&lt;/p&gt;\n</code></pre> <p>\ud83d\udca1 Tip: Avoid using tabs or multiple spaces for layout\u2014they may be collapsed or ignored by Markdown renderers. Use HTML only when semantic spacing is required and supported by your theme.</p>"},{"location":"style-guide/inline-code.html","title":"Inline code","text":""},{"location":"style-guide/inline-code.html#inline-code","title":"Inline Code","text":"<p>Use single backticks to highlight inline code, commands, or values within a sentence. This helps distinguish literal syntax from surrounding text and improves readability.</p> <p>\u2705 Examples:</p> <ul> <li>Use the <code>--force</code> flag to override the default behavior.  </li> <li>The function <code>validate_input()</code> checks for null values.  </li> <li>Navigate to <code>docs/index.md</code> to edit the homepage.</li> </ul> <p>\ud83d\udca1 Tip: Avoid wrapping code in quotation marks. Use backticks instead to preserve semantic clarity and enable syntax highlighting in supported renderers.</p>"},{"location":"style-guide/mkdocs-styling.html","title":"Mkdocs styling","text":""},{"location":"style-guide/mkdocs-styling.html#mkdocs-styling-tips","title":"MkDocs Styling Tips","text":"<p>If you're using Material for MkDocs, you can enhance code presentation with advanced styling features.</p> <p>\u2705 Enhancements:</p> <ul> <li>Tabs: Display multiple language versions of the same code block side by side.  </li> <li>Collapsible Sections: Hide long code blocks behind expandable toggles.  </li> <li>Syntax Highlighting: Automatically highlight supported languages using the <code>highlightjs</code> plugin.  </li> <li>Line Numbers: Add line numbers to code blocks via custom CSS or theme extensions.  </li> <li>Admonitions: Use <code>!!! note</code>, <code>!!! tip</code>, or <code>!!! warning</code> to call out important code-related guidance.</li> </ul> <p>\ud83d\udca1 Tip: For reusable patterns like CLI commands or config snippets, consider creating partials or macros using MkDocs plugins like <code>macros</code> or <code>include-markdown</code>. This supports modular reuse and mirrors DITA-style transclusion.</p>"},{"location":"style-guide/showing-markdown.html","title":"Showing markdown","text":""},{"location":"style-guide/showing-markdown.html#showing-markdown-syntax-in-markdown","title":"Showing Markdown Syntax in Markdown","text":"<p>To display Markdown syntax itself\u2014such as triple backticks or fenced code blocks\u2014without rendering them, wrap the syntax inside a higher-level code block using four or more backticks.</p> <p>\u2705 Example:</p> <pre><code>````markdown\n```python\ndef greet(name):\n    return f\"Hello, {name}!\"\n</code></pre> <p>This renders as:</p> <pre><code>```python\ndef greet(name):\n    return f\"Hello, {name}!\"\n</code></pre> <p>\ud83d\udca1 Tip: Always use more backticks outside than inside. If your inner block uses three, wrap it in four. If your inner block uses four, wrap it in five. This ensures proper escaping and clean rendering.</p>"},{"location":"style-guide/style-guide-excerpt.html","title":"Style Guide Excerpt","text":""},{"location":"style-guide/style-guide-excerpt.html#error-messaging-highlights","title":"Error Messaging Highlights","text":"<p>This excerpt summarizes key principles and reusable patterns from the full error messaging guide.</p> <ul> <li>Principles of effective messaging: Clarity, empathy, and actionability.</li> <li>Structure template: What happened + Why it happened + What to do next.</li> <li>Common patterns: Validation, auth, connectivity, upload, system.</li> <li>Modular includes: All patterns and principles are stored in <code>includes/</code> for reuse.</li> <li>Localization &amp; accessibility: Ensure messages are readable, translatable, and inclusive.</li> <li>Do &amp; Don\u2019t table: Quick reference for best practices.</li> <li>Reuse strategy: Favor modular fragments and shared terminology.</li> <li>Platform notes: Tailor messages for Web, Mobile, CLI, and API contexts.</li> </ul> <p>For full guidance, see <code>style-guide/error-messaging.md</code></p>"},{"location":"style-guide/ui-terminology.html","title":"UI Terminology Guidelines","text":""},{"location":"style-guide/ui-terminology.html#ui-terminology-guidelines","title":"UI Terminology Guidelines","text":"<p>Consistent UI terminology helps users navigate interfaces confidently and reduces cognitive load. This guide defines preferred terms for common UI elements and interactions.</p>"},{"location":"style-guide/ui-terminology.html#principles","title":"Principles","text":"<p>!include \"includes/style-guide/ui-terminology-principles.md\"</p>"},{"location":"style-guide/ui-terminology.html#standard-terms","title":"Standard Terms","text":"<p>!include \"includes/style-guide/ui-terminology-standard-terms.md\"</p>"},{"location":"style-guide/ui-terminology.html#platform-specific-notes","title":"Platform-Specific Notes","text":"<p>!include \"includes/style-guide/ui-terminology-platform-notes.md\"</p>"},{"location":"style-guide/ui-terminology.html#examples","title":"Examples","text":"<p>!include \"includes/style-guide/ui-terminology-examples.md\"</p>"},{"location":"style-guide/ui-terminology.html#reuse-strategy","title":"Reuse Strategy","text":"<p>!include \"includes/style-guide/ui-terminology-reuse-strategy.md\"</p>"},{"location":"style-guide/voice-and-tone.html","title":"Voice and tone","text":""},{"location":"style-guide/voice-and-tone.html#voice-tone-guidelines","title":"Voice &amp; Tone Guidelines","text":"<p>Your documentation should reflect a voice that is clear, confident, and helpful. Tone may shift depending on context, but it should always align with the following principles:</p>"},{"location":"style-guide/voice-and-tone.html#voice-characteristics","title":"Voice Characteristics","text":"<ul> <li>\u2705 Professional but approachable: Avoid jargon, but don\u2019t oversimplify.  </li> <li>\u2705 Confident but not arrogant: Provide guidance with clarity, not condescension.  </li> <li>\u2705 Helpful and empathetic: Anticipate user needs and frustrations.  </li> <li>\u2705 Concise and purposeful: Every word should serve the reader.</li> </ul>"},{"location":"style-guide/voice-and-tone.html#tone-adjustments-by-context","title":"Tone Adjustments by Context","text":"Context Tone Error messages Calm, reassuring, solution-oriented Onboarding Friendly, encouraging, motivational Reference docs Neutral, precise, minimal Troubleshooting Supportive, direct, confidence-building <p>\ud83d\udca1 Tip: When in doubt, write like a thoughtful teammate\u2014not a robot, not a marketer, and definitely not a gatekeeper.</p>"},{"location":"user-guide/howto-correct-transaction-error.html","title":"How to Correct a Transaction Error","text":""},{"location":"user-guide/howto-correct-transaction-error.html#how-to-correct-a-transaction-error","title":"How to Correct a Transaction Error","text":"<p>Problem: A transaction was posted incorrectly, and a customer needs a credit. Solution: Follow these steps to post a corrected transaction.</p> <ol> <li> <p>Locate the customer's account using a customer lookup.</p> </li> <li> <p>Navigate to the Transactions tab.</p> </li> <li> <p>Click the + New Transaction button.</p> </li> <li> <p>In the pop-up window, select the transaction type Manual Credit.</p> </li> <li> <p>Enter the correct amount.</p> </li> </ol> <ol> <li>Click Submit. The corrected transaction will appear in the transaction list with a \"Pending\" status.</li> </ol> <p>Add a note in the \"Comments\" field. For a transaction correction, use the format: <code>CORRECTION: &lt;reason for correction&gt;</code></p>"},{"location":"user-guide/reference-fields.html","title":"Reference Fields","text":"<p>This section is a factual list of all fields and their definitions within the application's UI, intended for quick look-up.</p> <p>Field Name  Type    Description CIF string  The unique Customer Information File number. Used for all customer identification. Amount  float   The monetary value of the transaction. Always uses two decimal places. Status  enum    The current state of the transaction. Can be PENDING, POSTED, or REVERSED.</p> <p>A video script with annotations will also be included, demonstrating expertise in multi-modal documentation [user query]. The script will explain a complex Qbank Core process (e.g., handling a customer dispute). The annotations will show where visuals (B-roll, screen capture) and graphics will be placed, demonstrating a sophisticated approach to communication beyond text alone.</p>"},{"location":"user-guide/tutorial-customer-lookup.html","title":"Customer Lookup Tutorial","text":""},{"location":"user-guide/tutorial-customer-lookup.html#qbank-core-internal-user-guide","title":"Qbank Core Internal User Guide","text":"<p>Tutorial: Getting Started with a Customer Lookup Goal: To perform your first successful customer lookup in the Qbank Core application. This tutorial will build muscle memory and introduce the core workflow.</p> <p>Log in to the Qbank Core application using your credentials.</p> <p>On the dashboard, locate the \"Customer Search\" field in the top-right corner.</p> <p>Enter the sample CIF 1234567 and press Enter.</p> <p>The system will load the customer profile. You should see a new tab titled \"Jane Doe\" appear. This indicates a successful lookup.</p> <p>&lt;&gt;</p> <p>How-To Guide: How to Correct a Transaction Error Problem: A transaction was posted incorrectly, and a customer needs a credit. Solution: Follow these steps to post a corrected transaction.</p> <p>Locate the customer's account using a customer lookup.</p> <p>Navigate to the \"Transactions\" tab.</p> <p>Click the + New Transaction button.</p> <p>In the pop-up window, select the transaction type \"Manual Credit.\"</p> <p>Enter the correct amount.</p> <p>&lt;&gt;</p> <p>Add a note in the \"Comments\" field. For a transaction correction, use the format: CORRECTION: .</p> <p>Click Submit. The corrected transaction will appear in the transaction list with a \"Pending\" status.</p> <p>Explanation: The Qbank Transaction Lifecycle The Qbank Core application processes transactions through a complex, multi-stage lifecycle. Understanding this process is key to resolving customer issues. This explanation provides a high-level overview of the why behind the process.</p> <p>&lt;&gt;</p> <p>Reference: Qbank Core Field Definitions This section is a factual list of all fields and their definitions within the application's UI, intended for quick look-up.</p>"},{"location":"workflows/sdlc.html","title":"Software Development Lifecycle (SDLC)","text":""},{"location":"workflows/sdlc.html#software-development-lifecycle-sdlc","title":"Software Development Lifecycle (SDLC)","text":"<p>The Software Development Lifecycle (SDLC) defines the structured process by which the QBank AppDev Team plans, designs, builds, tests, and deploys custom software applications. The SDLC provides a phased framework that ensures the software is developed efficiently and meets the standards defined in the QBank Application Development Policy.</p>"},{"location":"workflows/sdlc.html#sdlc-process","title":"SDLC Process","text":"<p>The SDLC framework consists of the following phases:</p> <ol> <li> <p>Initiation</p> </li> <li> <p>Requirements</p> </li> <li> <p>Design</p> </li> <li> <p>Development</p> </li> <li> <p>Testing</p> </li> <li> <p>Deployment</p> </li> </ol> <p>The diagram below provides a visual summary of the SDLC process.</p> <p></p> <p>Click to Enlarge</p>"},{"location":"workflows/sdlc.html#phase-one-initiation","title":"PHASE ONE: Initiation","text":"<p>Objective: Surface, prioritize, and convert product ideas into a tracked story.</p> <p>The Product Team maintains a Backlog of ideas collected from users and stakeholders. In the Initiation Phase, the team selects a set of ideas to be developed. For each idea selected, the Product Owner drafts a brief story describing the proposed functionality. The system sets newly created stories to REQ status and automatically assigns the story to the author. The REQ status marks the transition to the Requirements Phase.</p>"},{"location":"workflows/sdlc.html#phase-two-requirements","title":"PHASE TWO: Requirements","text":"<p>Objective: Turn a prioritized idea into a complete story.</p> <p>The Product Owner gathers detailed requirements and completes the story \u2014 the formal description of what is to be developed. The story includes the following:</p> <ul> <li> <p>Acceptance Criteria, consisting of concrete, testable statements that define when the feature will be considered complete. </p> </li> <li> <p>Nonfunctional requirements regarding any special performance, security, and compliance needs.</p> </li> <li> <p>Flags for any risk assessments needed, such as architectural or security review. </p> </li> </ul> <p>When the story is complete, the Product Owner assigns the story to a Developer on the Software Engineering Team and moves the story to DESIGN status.</p>"},{"location":"workflows/sdlc.html#phase-three-design","title":"PHASE THREE: Design","text":"<p>Objective: Define a producible technical solution.</p> <p>The Developer designs a technical solution and assigns the story to the Dev Lead to review the design against security, compliance, and scalability standards. The Dev Lead has two choices:</p> <ul> <li> <p>Reject the design, describe the improvements needed, and assign the story back to the Developer.</p> </li> <li> <p>Approve the design, assign the story back to the Developer, and move the story to DEV status.</p> </li> </ul>"},{"location":"workflows/sdlc.html#phase-four-development","title":"PHASE FOUR: Development","text":"<p>Objective: Implement the design as executable code.</p> <p>The Developer codes the solution and verifies its functionality locally. When ready, the Developer assigns the Story to a Code Reviewer to review the code against coding standards, and verify the completeness of required artifacts (unit tests, linters green, and architecture notes). The Code Reviewer has two choices:</p> <ul> <li> <p>Reject the coded solution, describe the improvements needed, and assign the story back to the Developer.</p> </li> <li> <p>Approve the coded solution, assign the story to a QA (Quality Assurance) Tester, and move the Story to QA status.</p> </li> </ul>"},{"location":"workflows/sdlc.html#phase-five-testing","title":"PHASE FIVE: Testing","text":"<p>Objective: Verify the functionality against the story\u2019s Acceptance Criteria.</p> <p>The QA Tester runs test cases derived from the Acceptance Criteria and exploratory tests focused on regression, edge cases, and nonfunctional concerns as needed. The QA Tester has two choices:</p> <ul> <li> <p>Reject the solution, document the failures, move the story back to DEV status, and assign it back to the Developer to re-code.</p> </li> <li> <p>Approve the solution and assign it to the User Acceptance Group for UAT (User Acceptance Testing)</p> </li> </ul> <p>The UAT Tester executes user-focused testing scenarios, and then has two choices:</p> <ul> <li> <p>Reject the solution, document the user-facing issues, move the story back to DEV status, and assign it back to the Developer to re-code.</p> </li> <li> <p>Accept the solution, move the story to DEPLOY status, and assign it to the Product Owner.</p> </li> </ul>"},{"location":"workflows/sdlc.html#phase-six-deployment","title":"PHASE SIX: Deployment","text":"<p>Objective: Obtain release approval and move validated code into Production.</p> <p>When a Story reaches DEPLOY status, the Product Owner requests release approval from the Change Advisory Board (CAB). After CAB approval, the Software Engineering and QA teams jointly execute the deployment to the PRODUCTION environment, and QA moves the story into DONE status. </p>"},{"location":"workflows/sdlc.html#post-deployment","title":"Post-Deployment","text":"<p>After a deployment is complete, the software's lifecycle continues with a retrospective meeting, the Maintenance phase, and eventual retirement.</p>"},{"location":"workflows/sdlc.html#retrospective","title":"Retrospective","text":"<p>A post-deployment retrospective is a meeting held shortly after a deployment to review the development and release process. The goal is to identify what went well, what could be improved, and create actionable steps for future iterations. This practice drives a culture of continuous improvement.</p>"},{"location":"workflows/sdlc.html#maintenance","title":"Maintenance","text":"<p>After a successful deployment, the software enters the longest phase of its lifecycle: maintenance. During this stage, the focus shifts from new feature development to ensuring the software's continued operation, security, and relevance.</p>"},{"location":"workflows/sdlc.html#retirement","title":"Retirement","text":"<p>The retirement, or \"sunsetting,\" phase marks the official end of the software's life cycle. This happens when the software is no longer needed, becomes obsolete, or is replaced by a newer system. A controlled retirement process minimizes disruption to the business and its users.</p>"},{"location":"workflows/sdlc.html#roles-and-responsibilities","title":"Roles and Responsibilities","text":"<p>The following details the duties associated with each role in the project, to ensure clarity and accountability.</p> <ul> <li> <p>Product Owner - Backlog prioritization, drafting Stories, collecting requirements, defining Acceptance Criteria, requesting CAB approval.</p> </li> <li> <p>Developer - Designing and coding solutions, re-coding as needed. </p> </li> <li> <p>Dev Lead - Design Review and approval authority.</p> </li> <li> <p>Code Reviewer - Ensure code quality and adherence to standards before QA.</p> </li> <li> <p>QA Tester - Validate functionality against Acceptance Criteria and report defects.</p> </li> <li> <p>UAT Tester - Validate the feature from an end-user perspective and approve for deployment.</p> </li> <li> <p>Change Advisory Board - Grant release approval for production deployment.</p> </li> </ul>"},{"location":"workflows/sdlc.html#exceptions","title":"Exceptions","text":"<p>When addressing hotfixes and emergency deployments, the standard Software Development Life Cycle (SDLC) is bypassed to allow for rapid production releases to mitigate critical issues. Unlike a normal release, these deployments do not follow the full, multi-staged testing and approval process.</p> <ul> <li> <p>Hotfix - A focused patch created directly from the stable production branch to correct a specific, high-priority defect, such as a security vulnerability or system-wide crash. </p> </li> <li> <p>Emergency Deployment - A temporary, reactive fix when a rollback is not feasible or to restore a known good state immediately. </p> </li> </ul> <p>In both cases, the priority shifts from a comprehensive SDLC to minimizing downtime and restoring service stability, with documentation and full integration testing performed retroactively once the immediate incident is resolved.</p>"},{"location":"workflows/sdlc.html#related-documents","title":"Related Documents","text":"<ul> <li>Application Development Policy</li> </ul> <p>Requirements</p> <ul> <li> <p>Story Template</p> </li> <li> <p>Acceptance Criteria Guidelines</p> </li> <li> <p>Software Risk Assessment Checklist</p> </li> </ul> <p>Design</p> <ul> <li> <p>Software Design Template</p> </li> <li> <p>Design Review Checklist</p> </li> </ul> <p>Development</p> <ul> <li> <p>Coding Standards</p> </li> <li> <p>Code Review Checklist</p> </li> </ul> <p>Testing</p> <ul> <li> <p>QA Test Plan Template</p> </li> <li> <p>UAT Script Template</p> </li> </ul> <p>Deployment</p> <ul> <li> <p>CAB Procedure</p> </li> <li> <p>Deployment Runbook</p> </li> <li> <p>Rollback Procedure</p> </li> <li> <p>Deployment Checklist</p> </li> </ul> <p>Post-Deployment</p> <ul> <li> <p>Retrospective Agenda Template</p> </li> <li> <p>Operations Manual Template</p> </li> <li> <p>Deprecation and Retirement Procedure</p> </li> </ul>"}]}